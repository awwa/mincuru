/* tslint:disable */
/* eslint-disable */
/**
 * Mincuru Cars App
 * Mincuru Cars App API仕様
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: awwa500@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Id,
    IdFromJSON,
    IdToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    TokenResponse,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    UserResponse,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models';

export interface DeleteUserRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUsersRequest {
    email?: string;
    name?: string;
    role?: GetUsersRoleEnum;
}

export interface GetUsersRefreshTokenRequest {
    body?: object;
}

export interface PatchUserRequest {
    id: number;
    inlineObject1?: InlineObject1;
}

export interface PostUsersRequest {
    inlineObject2?: InlineObject2;
}

export interface PostUsersLoginRequest {
    inlineObject?: InlineObject;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * ユーザの削除
     * @param {number} id 対象AdminのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * ユーザの削除
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 指定したIDの\'UserResponse\'取得
     * @param {number} id 対象AdminのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * 指定したIDの\'UserResponse\'取得
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<UserResponse>;

    /**
     * 条件にマッチしたユーザの一覧取得
     * @param {string} [email] メールアドレス
     * @param {string} [name] 名前
     * @param {'user' | 'admin'} [role] ロール
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserResponse>>>;

    /**
     * 条件にマッチしたユーザの一覧取得
     */
    getUsers(requestParameters: GetUsersRequest, initOverrides?: RequestInit): Promise<Array<UserResponse>>;

    /**
     * トークン更新
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUsersRefreshTokenRaw(requestParameters: GetUsersRefreshTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * トークン更新
     */
    getUsersRefreshToken(requestParameters: GetUsersRefreshTokenRequest, initOverrides?: RequestInit): Promise<TokenResponse>;

    /**
     * ユーザの更新
     * @param {number} id 対象AdminのID
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchUserRaw(requestParameters: PatchUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Id>>;

    /**
     * ユーザの更新
     */
    patchUser(requestParameters: PatchUserRequest, initOverrides?: RequestInit): Promise<Id>;

    /**
     * ユーザの追加
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postUsersRaw(requestParameters: PostUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Id>>;

    /**
     * ユーザの追加
     */
    postUsers(requestParameters: PostUsersRequest, initOverrides?: RequestInit): Promise<Id>;

    /**
     * ログイン
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postUsersLoginRaw(requestParameters: PostUsersLoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * ログイン
     */
    postUsersLogin(requestParameters: PostUsersLoginRequest, initOverrides?: RequestInit): Promise<TokenResponse>;

    /**
     * ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postUsersLogoutRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>>;

    /**
     * ログアウト
     */
    postUsersLogout(initOverrides?: RequestInit): Promise<InlineResponse200>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * ユーザの削除
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザの削除
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * 指定したIDの\'UserResponse\'取得
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * 指定したIDの\'UserResponse\'取得
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<UserResponse> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 条件にマッチしたユーザの一覧取得
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseFromJSON));
    }

    /**
     * 条件にマッチしたユーザの一覧取得
     */
    async getUsers(requestParameters: GetUsersRequest, initOverrides?: RequestInit): Promise<Array<UserResponse>> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * トークン更新
     */
    async getUsersRefreshTokenRaw(requestParameters: GetUsersRefreshTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/refresh_token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * トークン更新
     */
    async getUsersRefreshToken(requestParameters: GetUsersRefreshTokenRequest, initOverrides?: RequestInit): Promise<TokenResponse> {
        const response = await this.getUsersRefreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザの更新
     */
    async patchUserRaw(requestParameters: PatchUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Id>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdFromJSON(jsonValue));
    }

    /**
     * ユーザの更新
     */
    async patchUser(requestParameters: PatchUserRequest, initOverrides?: RequestInit): Promise<Id> {
        const response = await this.patchUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザの追加
     */
    async postUsersRaw(requestParameters: PostUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Id>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.inlineObject2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdFromJSON(jsonValue));
    }

    /**
     * ユーザの追加
     */
    async postUsers(requestParameters: PostUsersRequest, initOverrides?: RequestInit): Promise<Id> {
        const response = await this.postUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログイン
     */
    async postUsersLoginRaw(requestParameters: PostUsersLoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * ログイン
     */
    async postUsersLogin(requestParameters: PostUsersLoginRequest, initOverrides?: RequestInit): Promise<TokenResponse> {
        const response = await this.postUsersLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログアウト
     */
    async postUsersLogoutRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * ログアウト
     */
    async postUsersLogout(initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.postUsersLogoutRaw(initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetUsersRoleEnum {
    User = 'user',
    Admin = 'admin'
}
